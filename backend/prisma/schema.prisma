// To migrate changes: npx prisma migrate dev --name added_column
// Generate the new prisma with: npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---Artists Section---

model Artists {
  id                       Int                       @id
  name                     String?
  real_name                String?
  profile                  String?
  data_quality             String?
  full_data                Json?

  artist_aliases           ArtistAliases[]
  artist_groups            ArtistGroups[]
  artist_members           ArtistMembers[]
  artist_name_variations   ArtistNameVariations[]
  artist_urls              ArtistUrls[]
  master_artists           MasterArtists[]
  release_artists         ReleaseArtists[]
  release_extra_artists   ReleaseExtraArtists[]
  track_extra_artists    TrackExtraArtists[]

}

model ArtistUrls {
  id         Int       @id @default(autoincrement())
  artist_id  Int?
  url        String?

  artists    Artists?  @relation(fields: [artist_id], references: [id], onDelete: SetNull)

  @@index([artist_id])
}

model ArtistAliases {
  id         Int       @id @default(autoincrement())
  artist_id  Int?
  alias_name String?

  artists    Artists?  @relation(fields: [artist_id], references: [id], onDelete: SetNull)

  @@index([artist_id])
}

model ArtistNameVariations {
  id         Int       @id @default(autoincrement())
  artist_id  Int?
  variation  String?

  artists    Artists?  @relation(fields: [artist_id], references: [id], onDelete: SetNull)

  @@index([artist_id])
}

model ArtistMembers {
  id           Int       @id @default(autoincrement())
  artist_id    Int?
  member_name  String?

  artists      Artists?  @relation(fields: [artist_id], references: [id], onDelete: SetNull)

  @@index([artist_id])
}

model ArtistGroups {
  id          Int       @id @default(autoincrement())
  artist_id   Int?
  group_name  String?

  artists     Artists?  @relation(fields: [artist_id], references: [id], onDelete: SetNull)

  @@index([artist_id])
}

// --- Masters section ---

model Masters {
  id            Int                @id
  title         String?
  year          Int?
  main_release  Int?               // references Releases (not implemented yet)
  data_quality  String?
  full_data     Json?

  master_artists MasterArtists[]
  master_genres  MasterGenres[]
  master_styles  MasterStyles[]
  master_videos  MasterVideos[]

  @@index([main_release])
}

model MasterArtists {
  master_id   Int
  artist_id   Int
  join_phrase String?    // e.g., featuring, with, and, etc.
  anv         String?    // artist name variations

  masters     Masters    @relation(fields: [master_id], references: [id], onDelete: Cascade)
  artists     Artists    @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  @@id([master_id, artist_id])  // composite primary key
  @@index([artist_id])
}

model MasterGenres {
  master_id  Int
  genre      String

  masters    Masters   @relation(fields: [master_id], references: [id], onDelete: Cascade)

  @@id([master_id, genre])  // composite primary key
  @@index([genre])
}

model MasterStyles {
  master_id  Int
  style      String

  masters    Masters   @relation(fields: [master_id], references: [id], onDelete: Cascade)

  @@id([master_id, style])  // composite primary key
  @@index([style])
}

model MasterVideos {
  id          Int       @id @default(autoincrement())
  master_id   Int
  title       String?
  description String?

  masters     Masters   @relation(fields: [master_id], references: [id], onDelete: Cascade)

  @@index([master_id])
}

/// -------------------
/// ðŸ“€ Releases Section
/// -------------------

model Releases {
  id             Int                     @id
  master_id      Int?
  title          String?
  country        String?
  released_date  String?
  notes          String?
  data_quality   String?
  full_data      Json?

  release_artists         ReleaseArtists[]
  release_extra_artists   ReleaseExtraArtists[]
  release_formats         ReleaseFormats[]
  release_videos          ReleaseVideos[]
  release_tracks          ReleaseTracklist[]
  release_labels          ReleaseLabels[]
  release_companies       ReleaseCompanies[]
  release_genres          ReleaseGenres[]
  release_styles          ReleaseStyles[]
  release_identifiers     ReleaseIdentifiers[]
  track_extra_artists   TrackExtraArtists[]
}

model ReleaseArtists {
  release_id   Int
  artist_id    Int
  role         String?

  releases     Releases  @relation(fields: [release_id], references: [id], onDelete: Cascade)
  artists      Artists   @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  @@id([release_id, artist_id])
  @@index([artist_id])
}

model ReleaseExtraArtists {
  release_id   Int
  artist_id    Int
  anv          String?
  role         String?

  releases     Releases  @relation(fields: [release_id], references: [id], onDelete: Cascade)
  artists      Artists   @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  @@id([release_id, artist_id])
  @@index([artist_id])
}

model ReleaseGenres {
  release_id  Int
  genre       String

  releases    Releases @relation(fields: [release_id], references: [id], onDelete: Cascade)

  @@id([release_id, genre])
  @@index([genre])
}

model ReleaseStyles {
  release_id  Int
  style       String

  releases    Releases @relation(fields: [release_id], references: [id], onDelete: Cascade)

  @@id([release_id, style])
  @@index([style])
}

model ReleaseFormats {
  id           Int       @id @default(autoincrement())
  release_id   Int
  format_desc  String?

  releases     Releases  @relation(fields: [release_id], references: [id], onDelete: Cascade)

  @@index([release_id])
}

model ReleaseVideos {
  id           Int       @id @default(autoincrement())
  release_id   Int
  title        String?
  description  String?

  releases     Releases  @relation(fields: [release_id], references: [id], onDelete: Cascade)

  @@index([release_id])
}

model ReleaseTracklist {
  track_id           Int       @id @default(autoincrement())
  release_id         Int
  position           String?
  title              String?
  duration           String?

  releases           Releases           @relation(fields: [release_id], references: [id], onDelete: Cascade)
  track_extra_artists  TrackExtraArtists[]

  @@index([release_id])
}

model TrackExtraArtists {
  release_id   Int
  track_id     Int
  artist_id    Int
  name         String?
  anv          String?
  role         String?

  releases     Releases          @relation(fields: [release_id], references: [id], onDelete: Cascade)
  track        ReleaseTracklist  @relation(fields: [track_id], references: [track_id], onDelete: Cascade)
  artist       Artists           @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  @@id([release_id, track_id, artist_id])
  @@index([track_id])
  @@index([artist_id])
}

model ReleaseLabels {
  release_id   Int
  label_id     Int
  // future: label relation

  releases     Releases  @relation(fields: [release_id], references: [id], onDelete: Cascade)

  @@id([release_id, label_id])
}

model ReleaseCompanies {
  release_id   Int
  company_id   Int
  role         String?

  releases     Releases  @relation(fields: [release_id], references: [id], onDelete: Cascade)

  @@id([release_id, company_id])
}

model ReleaseIdentifiers {
  id          Int      @id @default(autoincrement())
  release_id  Int
  type        String?  // e.g., Barcode, Catalog Number
  value       String?

  releases    Releases @relation(fields: [release_id], references: [id], onDelete: Cascade)

  @@index([release_id])
}
